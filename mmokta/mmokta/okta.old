import requests
import json
import sys

# Read the configuration
with open('testconfig.json') as f:
    _testconfig = json.load(f)

okta_org_url=_testconfig['okta_org_url']
okta_token=_testconfig['okta_token']

# Set the request parameters
url_userlookup = '/api/v1/users/'
url_grouplookup = '/api/v1/groups?q='
url_groupchange = '/api/v1/groups'
url_zonechange = ''

# Check arguments
if len(sys.argv) != 3:
	print "Usage: " + sys.argv[0] + " <user> <group>"
	sys.exit(1)

user = sys.argv[1]
group = sys.argv[2]

print 'Trying to assign/unassign user ' + user + ' to/from group ' + group + '!'

if(okta_org_url == '') or (okta_token == ''):
    raise Exception('Cannot read OKTA token')


# Set proper headers
headers = {"Content-Type":"application/json","Accept":"application/json", "Authorization":"SSWS " + okta_token}


################# Lookup User


# Lookup the user
url = "https://" +  okta_org_url + url_userlookup + user

print 'Invoking URL %s for user lookup' % url

response = requests.get(url, headers=headers )

# Check for HTTP codes other than 200
if response.status_code != 200:
    print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json())
    exit()

print 'Performed user lookup for user ' + user + '!'

# Decode the JSON response into a dictionary and use the data
data = response.json()

userid = data['id']

print 'User ' + user + ' OKTA ID is ' + userid;



############### Lookup Group


# Lookup the group
url = "https://" +  okta_org_url + url_grouplookup + group + '&limit=2'

print 'Invoking URL %s for group lookup' % url

response = requests.get(url, headers=headers )

# Check for HTTP codes other than 200
if response.status_code != 200:
    print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json())
    exit()

print 'Performed group lookup for group ' + group + '!'

# Decode the JSON response into a dictionary and use the data
data = response.json()

#print 'Returned %d entries!' % len(data)

if(len(data) != 1):
	raise Exception('Group search for %s did not return exactly one entry (%d):  please refine the query!' % (group, len(data)))

groupid = data[0]['id']

print 'Group ' + group + ' OKTA ID is ' + groupid;


############### Add User to Group


# Lookup the group
url = "https://" +  okta_org_url + url_groupchange + '/' + groupid + '/users/' + userid

print 'Invoking HTTP PUT on URL %s for group assignment' % url

response = requests.put(url, headers=headers )

# Check for HTTP codes other than 204
if response.status_code != 204:
    print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json())
    exit()

print 'Assigned group %s (%s) to user %s (%s)!' % (group, groupid, user, userid)


############### Remove User from  Group

# Lookup the group
url = "https://" +  okta_org_url + url_groupchange + '/' + groupid + '/users/' + userid

print 'Invoking HTTP DELETE on URL %s for group unassignment' % url

response = requests.delete(url, headers=headers )

# Check for HTTP codes other than 204
if response.status_code != 204:
    print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json())
    exit()

print 'Removed group %s (%s) to user %s (%s)!' % (group, groupid, user, userid)
